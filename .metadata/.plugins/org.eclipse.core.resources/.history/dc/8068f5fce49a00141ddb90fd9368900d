package br.nauber.iadapter.function;

import java.util.ArrayList;
import java.util.List;

import org.jgap.IChromosome;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class SeleniumRunner implements IRunner {

	private static List<IScriptSelenium> listaScripts = new ArrayList();

	public static List<IScriptSelenium> getListaScripts() {
		return listaScripts;
	}

	public static void setListaScripts(List<IScriptSelenium> listaScripts) {
		SeleniumRunner.listaScripts = listaScripts;
	}

	
	public void run(IChromosome chromosome,IScriptSelenium scriptSelenium, List<Thread> threads) {
		Thread thread = new Thread(scriptSelenium);
		thread.start();
		threads.add(thread);
		
	}
	
	@Override
	public double run(IChromosome chromosome) {

		List<Thread> threads = new ArrayList<Thread>();

		for (int i = 0; i <= chromosome.size() - 2; i = i + 2) {
			int script = (Integer) chromosome.getGenes()[i].getAllele();
			int user = (Integer) chromosome.getGenes()[i + 1].getAllele();

			IScriptSelenium scriptSelenium = listaScripts.get(i);
			for (int j = 0; j < user; j++) {]
				Thread thread = new Thread(scriptSelenium);
				thread.start();
				threads.add(thread);
			}

			int counter = 0;
			while (counter <= threads.size() - 1) {
				counter = 0;
				for (Thread thread : threads) {

					if (!(thread.isAlive())) {
						counter++;
					}

				}
			}

		}
		return 0;
	}

	@Override
	public double stop(IChromosome chromosome) {
		// TODO Auto-generated method stub
		return 0;
	}

}
