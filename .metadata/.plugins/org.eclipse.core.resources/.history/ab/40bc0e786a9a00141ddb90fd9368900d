package br.nauber.iadapter.function;

import java.util.ArrayList;
import java.util.List;

import org.jgap.Chromosome;
import org.jgap.IChromosome;

public class Judge extends Thread{

	private static List runners = new ArrayList();
	private static List servers = new ArrayList();

	private static Game game;

	public static long requestGame(IChromosome a_subject, boolean atackPlayer) {

		long max = 0;

		if (game == null) {

			game = new Game();

		}
		

		if (atackPlayer) {
			game.getAtacantes().add(a_subject);
		}

		if (!atackPlayer) {
			game.getDefensores().add(a_subject);
		}
		
		
		game.setNumberOfPlayers(game.getNumberOfPlayers() + 1);
		while (game.getNumberOfPlayers() != game.getNumberMaxPlayers()) {

		}

		


		if (game.getNumberOfPlayers() == game.getNumberMaxPlayers()) {

			for (IChromosome defensor : game.getDefensores()) {

				for (IRunner runner : Game.getRunnersDefend()) {
					runner.run(defensor);
				}
			}

			for (IChromosome atack : game.getAtacantes()) {

				for (IRunner runner : Game.getRunnersAtack()) {

					long timeInit = System.currentTimeMillis();

					runner.run(atack);

					long timeEnd = System.currentTimeMillis();

					long value = timeEnd - timeInit;

					atack.setFitnessValueDirectly(value);

					if (value > max) {
						max = value;
					}

				}

			}
			for (IChromosome defensor : game.getDefensores()) {
				for (IChromosome atack : game.getAtacantes()) {
					defensor.setFitnessValueDirectly(atack
							.getFitnessValueDirectly());

				}
			}

			game.setAtacantes(new ArrayList());
			game.setDefensores(new ArrayList());
			game.setNumberOfPlayers(0);

		}
		return max;

	}

	private static long bilheteDefensor = -1;

	private static long bilheteAtacante;

	public static long getBilheteDefensor() {
		return bilheteDefensor;
	}

	public static void setBilheteDefensor(long bilheteDefensor) {
		Judge.bilheteDefensor = bilheteDefensor;
	}

	public static long getBilheteAtacante() {
		return bilheteAtacante;
	}

	public static void setBilheteAtacante(long bilheteAtacante) {
		Judge.bilheteAtacante = bilheteAtacante;
	}

	private static double porta;

	public static double getPorta() {
		return porta;
	}

	public static void setPorta(double porta) {
		Judge.porta = porta;
	}

	public static boolean waitPlayer;

	public static boolean gameFinish;

	public static boolean isGameFinish() {
		return gameFinish;
	}

	public static void setGameFinish(boolean gameFinish) {
		Judge.gameFinish = gameFinish;
	}

	public static boolean isWaitPlayer() {
		return waitPlayer;
	}

	public static void setWaitPlayer(boolean waitPlayer) {
		Judge.waitPlayer = waitPlayer;
	}

	private static double responseTime;

	public static double getResponseTime() {
		return responseTime;
	}

	public static void setResponseTime(double responseTime) {
		Judge.responseTime = responseTime;
	}

}
