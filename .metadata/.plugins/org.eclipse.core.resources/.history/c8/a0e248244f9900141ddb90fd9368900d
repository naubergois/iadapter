package br.nauber.iadapter.function;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.HashMap;
import java.util.Map;

import org.jgap.Configuration;
import org.jgap.Gene;
import org.jgap.IChromosome;
import org.jgap.IGeneConstraintChecker;
import org.jgap.InvalidConfigurationException;

import com.mysql.management.MysqldResource;
import com.mysql.management.MysqldResourceI;
import com.mysql.management.util.QueryUtil;

public class MySQLChromossome implements IChromosome {
	
	
	 public static MysqldResource startDatabase(File databaseDir, int port, String userName, String password) {
		 MysqldResource mysqldResource = new MysqldResource(databaseDir);
		 Map database_options = new HashMap();
		 database_options.put(MysqldResourceI.PORT, Integer.toString(port));
		 database_options.put(MysqldResourceI.INITIALIZE_USER, "true");
		 database_options.put(MysqldResourceI.INITIALIZE_USER_NAME, userName);
		 database_options.put(MysqldResourceI.INITIALIZE_PASSWORD, password);
		 mysqldResource.start("test-mysqld-thread", database_options);
		 if (!mysqldResource.isRunning()) {
		 throw new RuntimeException("MySQL did not start.");
		 }
		 System.out.println("MySQL is running.");
		 return mysqldResource;
		 }


	
	public MySQLChromossome() {
		 public static final String DRIVER = "com.mysql.jdbc.Driver";
		 public static final String JAVA_IO_TMPDIR = "java.io.tmpdir";
		 public static void main(String[] args) throws Exception {
		 File ourAppDir = new File(System.getProperty(JAVA_IO_TMPDIR));
		 File databaseDir = new File(ourAppDir, "mysql-mxj");
		 int portNumber = Integer.parseInt(System.getProperty("c-mxj_test_port",
		 "3336"));
		 String userName = "olyanren";
		 String password = "1987";
		 MysqldResource mysqldResource = startDatabase(databaseDir, portNumber,
		 userName, password);
		 Class.forName(DRIVER);
		 Connection conn = null;
		 try {
		 String dbName = "our_test_app";
		 String url = "jdbc:mysql://localhost:" + portNumber + "/" + dbName
		 + "?" + "createDatabaseIfNotExist=true"
		 ;
		 conn = DriverManager.getConnection(url, userName, password);
		 String sql = "SELECT VERSION()";
		 String queryForString = new QueryUtil(conn).queryForString(sql);
		 System.out.println("------------------------");
		 System.out.println(sql);
		 System.out.println("------------------------");
		 System.out.println(queryForString);
		 System.out.println("------------------------");
		 System.out.flush();
		 Thread.sleep(100); // wait for System.out to finish flush
		 } finally {
		 try {
		 if (conn != null) {
		 conn.close();
		 }
		 } catch (Exception e) {
		 e.printStackTrace();
		 }
		 try {
		 mysqldResource.shutdown();
		 } catch (Exception e) {
		 e.printStackTrace();
		 }
		 }
		// TODO Auto-generated constructor stub
	}
	}

	@Override
	public Object clone() {
		// TODO Auto-generated method stub
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public int compareTo(Object arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Gene getGene(int a_desiredLocus) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Gene[] getGenes() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setGenes(Gene[] a_genes) throws InvalidConfigurationException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setFitnessValue(double a_newFitnessValue) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setFitnessValueDirectly(double a_newFitnessValue) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public double getFitnessValue() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getFitnessValueDirectly() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setIsSelectedForNextGeneration(boolean a_isSelected) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isSelectedForNextGeneration() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void setConstraintChecker(IGeneConstraintChecker a_constraintChecker)
			throws InvalidConfigurationException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setApplicationData(Object a_newData) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Object getApplicationData() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void cleanup() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Configuration getConfiguration() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void increaseAge() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resetAge() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setAge(int a_age) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int getAge() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void increaseOperatedOn() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resetOperatedOn() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int operatedOn() {
		// TODO Auto-generated method stub
		return 0;
	}

}
